package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Task task
// swagger:model task
type Task struct {

	// command
	Command string `json:"command,omitempty"`

	// date
	Date strfmt.DateTime `json:"date,omitempty"`

	// id
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// period
	// Required: true
	// Min Length: 1
	Period *string `json:"period"`

	// repeats
	// Read Only: true
	Repeats int32 `json:"repeats,omitempty"`

	// status
	// Max Length: 20
	// Min Length: 1
	Status string `json:"status,omitempty"`
}

// Validate validates this task
func (m *Task) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePeriod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Task) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	if err := validate.MinLength("period", "body", string(*m.Period), 1); err != nil {
		return err
	}

	return nil
}

func (m *Task) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinLength("status", "body", string(m.Status), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", string(m.Status), 20); err != nil {
		return err
	}

	return nil
}
